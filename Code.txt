#include<windows.h>
#include <GL/glut.h>
#include <iostream>

using namespace std;

static int slices = 16;
static int stacks = 16;
int smotoh_color_transition_lock=0;
GLuint colorCounter = 0, angle=0;


static void resize(int width, int height)
{
    const float ar = (float) width / (float) height;

    glViewport(0, 0, width, height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glFrustum(-ar, ar, -1.0, 1.0, 2.0, 100.0);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity() ;
}

static void display(void)
{

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glPushMatrix();
        glTranslated(0,0,-5);
        glRotated(60,1,0,0);
        glutSolidSphere(1,slices,stacks);
    glPopMatrix();

    //Color for the object
    GLfloat diffColors[5][4] = {{0.9, 0.5, 0.5, 1.0},
                                {0.9, 0.7, 0.2, 1.0},
                                {0.5, 0.5, 0.9, 1.0},
                                 {0.5, 0.9, 0.3, 1.0},
                                 {0.3, 0.8, 0.9, 1.0}};

     GLfloat diffColors2[35][4] = {{0.1, 0, 0, 1.0},
                                 {0.2, 0, 0, 1.0},
                                 {0.3, 0, 0, 1.0},
                                 {0.4, 0, 0, 1.0},
                                 {0.5, 0, 0, 1.0},
                                 {0.6, 0, 0, 1.0},
                                 {0.7, 0, 0, 1.0},
                                 {0.8, 0, 0, 1.0},
                                 {0.9, 0, 0, 1.0},
                                 {0.8, 0.1, 0, 1.0},
                                 {0.6, 0.1, 0, 1.0},
                                 {0.4, 0.1, 0, 1.0},
                                 {0.2, 0.2, 0, 1.0},
                                 {0, 0.3, 0, 1.0},
                                 {0, 0.4, 0, 1.0},
                                 {0, 0.5, 0, 1.0},
                                 {0, 0.6, 0, 1.0},
                                 {0, 0.7, 0, 1.0},
                                 {0, 0.8, 0, 1.0},
                                 {0, 0.9, 0, 1.0},
                                 {0, 0.8, 0, 1.0},
                                 {0, 0.6, 0.1, 1.0},
                                 {0, 0.4, 0.1, 1.0},
                                 {0, 0.3, 0.1, 1.0},
                                 {0, 0.2, 0.1, 1.0},
                                 {0, 0, 0.2, 1.0},
                                 {0, 0, 0.3, 1.0},
                                 {0, 0, 0.4, 1.0},
                                 {0, 0, 0.5, 1.0},
                                 {0, 0, 0.6, 1.0},
                                 {0, 0, 0.7, 1.0},
                                 {0, 0, 0.8, 1.0},
                                 {0, 0, 0.9, 1.0},
                                 {0, 0, 1, 1.0}};

    if(smotoh_color_transition_lock==1) //If auto color transition enabled
    {
        glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE, diffColors2[colorCounter]);
    }

    else
        glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE, diffColors[colorCounter]);

	// Define specular color and shininess
    GLfloat specColor[] = {1.0, 1.0, 1.0, 1.0};
    GLfloat shininess[] = {100.0};
	// Note that the specular color and shininess can stay constant
    glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, specColor);
    glMaterialfv(GL_FRONT_AND_BACK, GL_SHININESS, shininess);
    glutSwapBuffers();
}


static void key(unsigned char key, int x, int y)
{
    switch (key)
    {


        case 'c': //Color toggle
            smotoh_color_transition_lock=0;
            colorCounter += 1;
            if(colorCounter>4)
                colorCounter=0;
            break;

        case 't': //Enable/Disable smooth color transition

            smotoh_color_transition_lock=1;
            colorCounter += 1;
            if(colorCounter>34)
                colorCounter=0;
            break;
        default:
        cout << "Unhandled key press " << key << "." << endl;

    }

    glutPostRedisplay();
}



static void idle(void)
{
    glutPostRedisplay();
}




int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
    glutInitWindowSize(500,500);
    glutInitWindowPosition(200,200);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
    glutCreateWindow("18101020 CSE425 Assignment");
    glutReshapeFunc(resize);
    glutDisplayFunc(display);
    glutKeyboardFunc(key);
    glutIdleFunc(idle);

    glClearColor(0,0,0,1);
    //glEnable(GL_CULL_FACE);
    //glCullFace(GL_BACK);

    glEnable(GL_DEPTH_TEST);
    //glDepthFunc(GL_LESS);

    glEnable(GL_LIGHT0);
    //glEnable(GL_NORMALIZE);
    glEnable(GL_LIGHTING);



    glutMainLoop();

    return EXIT_SUCCESS;
}
